import "./chunk-X7HCJ7ZS.js";
import "./chunk-DYWWDCTU.js";
import {
  SvelteComponentDev,
  add_location,
  append_hydration_dev,
  append_styles,
  attr_dev,
  binding_callbacks,
  children,
  claim_element,
  claim_space,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  get_all_dirty_from_scope,
  get_slot_changes,
  init,
  insert_hydration_dev,
  onMount,
  safe_not_equal,
  set_style,
  space,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-ZOAWO7US.js";
import "./chunk-672HPU4M.js";
import "./chunk-2B2CG5KL.js";

// node_modules/svelte-scrolly/Scrolly.svelte
var file = "D:/user/B51094/Downloads/VisualDados/my-portfolio/node_modules/svelte-scrolly/Scrolly.svelte";
function add_css(target) {
  append_styles(target, "svelte-14jsymd", ".scrolly.svelte-14jsymd{position:relative;display:grid;grid-template-columns:var(--scrolly-story-width, 1fr) var(--scrolly-viz-width, 1fr);grid-auto-flow:row dense;gap:var(--scrolly-gap, 4rem)}.viz.svelte-14jsymd,.story.svelte-14jsymd{grid-row:1}.viz.svelte-14jsymd{position:sticky;top:max(var(--scrolly-margin, 0) * 1px, var(--scrolly-viz-top, 2em));max-height:100vh}@container style(--scrolly-layout: viz-first){.scrolly.svelte-14jsymd{grid-template-columns:var(--scrolly-viz-width, 1fr) var(--scrolly-story-width, 1fr)}.viz.svelte-14jsymd{grid-column:1}.story.svelte-14jsymd{grid-column:2}}@container style(--scrolly-layout: overlap){.scrolly.svelte-14jsymd{grid-template-columns:1fr}.viz.svelte-14jsymd,.story.svelte-14jsymd{grid-column:1}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Nyb2xseS5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBMEhBLHVCQUFTLENBQ1IsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsT0FBTyxDQUFFLElBQUksQ0FDYixxQkFBcUIsQ0FBRSxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQ3BGLGNBQWMsQ0FBRSxHQUFHLENBQUMsS0FBSyxDQUN6QixHQUFHLENBQUUsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUM3QixDQUVBLG1CQUFJLENBQ0oscUJBQU8sQ0FDTixRQUFRLENBQUUsQ0FDWCxDQUVBLG1CQUFLLENBQ0osUUFBUSxDQUFFLE1BQU0sQ0FDaEIsR0FBRyxDQUFFLElBQUksSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUNyRSxVQUFVLENBQUUsS0FDYixDQUVBLFdBQVcsd0JBQXdCLFNBQVMsQ0FBRSxDQUM3Qyx1QkFBUyxDQUNSLHFCQUFxQixDQUFFLElBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQ3BGLENBRUEsbUJBQUssQ0FDSixXQUFXLENBQUUsQ0FDZCxDQUVBLHFCQUFPLENBQ04sV0FBVyxDQUFFLENBQ2QsQ0FDRCxDQUVBLFdBQVcsd0JBQXdCLE9BQU8sQ0FBRSxDQUMzQyx1QkFBUyxDQUNSLHFCQUFxQixDQUFFLEdBQ3hCLENBRUEsbUJBQUksQ0FDSixxQkFBTyxDQUNOLFdBQVcsQ0FBRSxDQUNkLENBQ0QiLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbIlNjcm9sbHkuc3ZlbHRlIl19 */");
}
var get_viz_slot_changes = (dirty) => ({});
var get_viz_slot_context = (ctx) => ({});
function create_fragment(ctx) {
  let section2;
  let section0;
  let t;
  let section1;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    null
  );
  const viz_slot_template = (
    /*#slots*/
    ctx[9].viz
  );
  const viz_slot = create_slot(
    viz_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    get_viz_slot_context
  );
  const block = {
    c: function create() {
      section2 = element("section");
      section0 = element("section");
      if (default_slot)
        default_slot.c();
      t = space();
      section1 = element("section");
      if (viz_slot)
        viz_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      section2 = claim_element(nodes, "SECTION", { class: true, style: true });
      var section2_nodes = children(section2);
      section0 = claim_element(section2_nodes, "SECTION", { class: true });
      var section0_nodes = children(section0);
      if (default_slot)
        default_slot.l(section0_nodes);
      section0_nodes.forEach(detach_dev);
      t = claim_space(section2_nodes);
      section1 = claim_element(section2_nodes, "SECTION", { class: true });
      var section1_nodes = children(section1);
      if (viz_slot)
        viz_slot.l(section1_nodes);
      section1_nodes.forEach(detach_dev);
      section2_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(section0, "class", "story svelte-14jsymd");
      add_location(section0, file, 113, 1, 3129);
      attr_dev(section1, "class", "viz svelte-14jsymd");
      add_location(section1, file, 116, 1, 3177);
      attr_dev(section2, "class", "scrolly svelte-14jsymd");
      set_style(
        section2,
        "--scrolly-margin",
        /*margin*/
        ctx[0]
      );
      add_location(section2, file, 112, 0, 3043);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, section2, anchor);
      append_hydration_dev(section2, section0);
      if (default_slot) {
        default_slot.m(section0, null);
      }
      append_hydration_dev(section2, t);
      append_hydration_dev(section2, section1);
      if (viz_slot) {
        viz_slot.m(section1, null);
      }
      ctx[10](section1);
      ctx[11](section2);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        256)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (viz_slot) {
        if (viz_slot.p && (!current || dirty & /*$$scope*/
        256)) {
          update_slot_base(
            viz_slot,
            viz_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              viz_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              get_viz_slot_changes
            ),
            get_viz_slot_context
          );
        }
      }
      if (!current || dirty & /*margin*/
      1) {
        set_style(
          section2,
          "--scrolly-margin",
          /*margin*/
          ctx2[0]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      transition_in(viz_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      transition_out(viz_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(section2);
      }
      if (default_slot)
        default_slot.d(detaching);
      if (viz_slot)
        viz_slot.d(detaching);
      ctx[10](null);
      ctx[11](null);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Scrolly", slots, ["default", "viz"]);
  let { progress = 0 } = $$props;
  let { progressRaw = 0 } = $$props;
  let { threshold = 0.5 } = $$props;
  let { margin = 30 } = $$props;
  let { debounce = false } = $$props;
  let { throttle = false } = $$props;
  let container, vizContainer;
  let minTop, maxTop;
  let pageTop;
  let rect = {};
  let intersectionObserver, resizeObserver;
  let intersectionRatio = 0;
  const clamp = (min, value, max) => Math.min(Math.max(min, value), max);
  const getProgress = (value, min, max) => 100 * (value - min) / (max - min);
  const runImmediately = (fn) => fn();
  const identity = (fn) => fn;
  let throttled;
  let debounced;
  onMount(() => {
    function calculateProgress({ top = container.getBoundingClientRect().top } = {}) {
      $$invalidate(4, progressRaw = getProgress(top, minTop, maxTop));
      updateProgress();
    }
    function updateProgress() {
      let clampedProgress = clamp(0, progressRaw, 100);
      if (clampedProgress === 0 || clampedProgress === 100) {
        $$invalidate(3, progress = clampedProgress);
      } else {
        debounced(throttled(() => $$invalidate(3, progress = clampedProgress)));
      }
    }
    function calculateBounds() {
      rect = container.getBoundingClientRect();
      pageTop = window.scrollY + rect.top;
      minTop = Math.min(pageTop, innerHeight * threshold) + margin;
      maxTop = innerHeight - rect.height + margin;
      calculateProgress(rect);
    }
    intersectionObserver = new IntersectionObserver((entries) => {
      let lastEntry = entries.at(-1);
      intersectionRatio = lastEntry.intersectionRatio;
      if (lastEntry.isIntersecting) {
        calculateBounds();
        calculateProgress();
        window.addEventListener("scroll", calculateProgress);
        window.addEventListener("resize", calculateBounds);
        resizeObserver == null ? void 0 : resizeObserver.observe(container);
      } else {
        window.removeEventListener("scroll", calculateProgress);
        window.removeEventListener("resize", calculateBounds);
        resizeObserver == null ? void 0 : resizeObserver.unobserve(container);
      }
    });
    intersectionObserver.observe(container, {
      rootMargin: (margin ?? 0) + "px",
      threshold
    });
    resizeObserver = new ResizeObserver(calculateBounds);
    calculateBounds();
  });
  const writable_props = ["progress", "progressRaw", "threshold", "margin", "debounce", "throttle"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Scrolly> was created with unknown prop '${key}'`);
  });
  function section1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      vizContainer = $$value;
      $$invalidate(2, vizContainer);
    });
  }
  function section2_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      container = $$value;
      $$invalidate(1, container);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("progress" in $$props2)
      $$invalidate(3, progress = $$props2.progress);
    if ("progressRaw" in $$props2)
      $$invalidate(4, progressRaw = $$props2.progressRaw);
    if ("threshold" in $$props2)
      $$invalidate(5, threshold = $$props2.threshold);
    if ("margin" in $$props2)
      $$invalidate(0, margin = $$props2.margin);
    if ("debounce" in $$props2)
      $$invalidate(6, debounce = $$props2.debounce);
    if ("throttle" in $$props2)
      $$invalidate(7, throttle = $$props2.throttle);
    if ("$$scope" in $$props2)
      $$invalidate(8, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    onMount,
    progress,
    progressRaw,
    threshold,
    margin,
    debounce,
    throttle,
    container,
    vizContainer,
    minTop,
    maxTop,
    pageTop,
    rect,
    intersectionObserver,
    resizeObserver,
    intersectionRatio,
    clamp,
    getProgress,
    runImmediately,
    identity,
    throttled,
    debounced
  });
  $$self.$inject_state = ($$props2) => {
    if ("progress" in $$props2)
      $$invalidate(3, progress = $$props2.progress);
    if ("progressRaw" in $$props2)
      $$invalidate(4, progressRaw = $$props2.progressRaw);
    if ("threshold" in $$props2)
      $$invalidate(5, threshold = $$props2.threshold);
    if ("margin" in $$props2)
      $$invalidate(0, margin = $$props2.margin);
    if ("debounce" in $$props2)
      $$invalidate(6, debounce = $$props2.debounce);
    if ("throttle" in $$props2)
      $$invalidate(7, throttle = $$props2.throttle);
    if ("container" in $$props2)
      $$invalidate(1, container = $$props2.container);
    if ("vizContainer" in $$props2)
      $$invalidate(2, vizContainer = $$props2.vizContainer);
    if ("minTop" in $$props2)
      minTop = $$props2.minTop;
    if ("maxTop" in $$props2)
      maxTop = $$props2.maxTop;
    if ("pageTop" in $$props2)
      pageTop = $$props2.pageTop;
    if ("rect" in $$props2)
      rect = $$props2.rect;
    if ("intersectionObserver" in $$props2)
      intersectionObserver = $$props2.intersectionObserver;
    if ("resizeObserver" in $$props2)
      resizeObserver = $$props2.resizeObserver;
    if ("intersectionRatio" in $$props2)
      intersectionRatio = $$props2.intersectionRatio;
    if ("throttled" in $$props2)
      throttled = $$props2.throttled;
    if ("debounced" in $$props2)
      debounced = $$props2.debounced;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*throttle*/
    128) {
      $: {
        let last = 0;
        throttled = throttle > 0 ? function(fn) {
          return function() {
            let now = performance.now();
            if (now - last >= throttle) {
              fn();
              last = now;
            }
          };
        } : identity;
      }
    }
    if ($$self.$$.dirty & /*debounce*/
    64) {
      $: {
        let debouncerId;
        debounced = debounce ? debounce > 0 ? function(fn) {
          clearTimeout(debouncerId);
          debouncerId = setTimeout(fn, debounce);
        } : function(fn) {
          cancelAnimationFrame(debouncerId);
          debouncerId = requestAnimationFrame(fn);
        } : runImmediately;
      }
    }
  };
  return [
    margin,
    container,
    vizContainer,
    progress,
    progressRaw,
    threshold,
    debounce,
    throttle,
    $$scope,
    slots,
    section1_binding,
    section2_binding
  ];
}
var Scrolly = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        progress: 3,
        progressRaw: 4,
        threshold: 5,
        margin: 0,
        debounce: 6,
        throttle: 7
      },
      add_css
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Scrolly",
      options,
      id: create_fragment.name
    });
  }
  get progress() {
    throw new Error("<Scrolly>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set progress(value) {
    throw new Error("<Scrolly>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get progressRaw() {
    throw new Error("<Scrolly>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set progressRaw(value) {
    throw new Error("<Scrolly>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get threshold() {
    throw new Error("<Scrolly>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set threshold(value) {
    throw new Error("<Scrolly>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get margin() {
    throw new Error("<Scrolly>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set margin(value) {
    throw new Error("<Scrolly>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get debounce() {
    throw new Error("<Scrolly>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set debounce(value) {
    throw new Error("<Scrolly>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get throttle() {
    throw new Error("<Scrolly>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set throttle(value) {
    throw new Error("<Scrolly>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Scrolly_default = Scrolly;
export {
  Scrolly_default as default
};
//# sourceMappingURL=svelte-scrolly.js.map
